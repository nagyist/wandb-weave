"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6492],{28456:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=r(85893),o=r(11151);const i={},s="Send OpenTelemetry Traces to Weave",a={id:"guides/tools/otel",title:"Send OpenTelemetry Traces to Weave",description:"Overview",source:"@site/docs/guides/tools/otel.md",sourceDirName:"guides/tools",slug:"/guides/tools/otel",permalink:"/guides/tools/otel",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/tools/otel.md",tags:[],version:"current",lastUpdatedAt:1744327854e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Deploy",permalink:"/guides/tools/deploy"},next:{title:"Integrations",permalink:"/guides/integrations/"}},d={},l=[{value:"Overview",id:"overview",level:2},{value:"Get started",id:"get-started",level:2},{value:"API endpoint details",id:"api-endpoint-details",level:2},{value:"Required headers",id:"required-headers",level:3},{value:"Optional headers",id:"optional-headers",level:3},{value:"Response",id:"response",level:3},{value:"Error codes",id:"error-codes",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Generate authorization headers",id:"generate-authorization-headers",level:2},{value:"Example usage",id:"example-usage",level:2},{value:"Create a basic OTLP exporter",id:"create-a-basic-otlp-exporter",level:3},{value:"Use OpenLLMetry&#39;s <code>OpenAIInstrumentor</code>",id:"use-openllmetrys-openaiinstrumentor",level:3},{value:"Use OpenInference&#39;s <code>OpenAIInstrumentor</code>",id:"use-openinferences-openaiinstrumentor",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"send-opentelemetry-traces-to-weave",children:"Send OpenTelemetry Traces to Weave"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"You can use the OTEL Trace API to send OpenTelemetry-compatible trace data to Weave. This allows you to integrate observability from any OTEL-instrumented application\u2014like GenAI apps, backend services, or external APIs\u2014into Weave's ecosystem."}),"\n",(0,t.jsx)(n.p,{children:"Once ingested, trace data can be used to visualize, compare, and correlate with other Weave data."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Monitor OpenAI calls alongside frontend or backend performance"}),"\n",(0,t.jsx)(n.li,{children:"Trace long-running chains and identify bottlenecks"}),"\n",(0,t.jsx)(n.li,{children:"Compare traces across deployments or versions"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"get-started",children:"Get started"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Get your API key from ",(0,t.jsx)(n.a,{href:"https://wandb.ai/authorize",children:"wandb.ai/authorize"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Define your ",(0,t.jsx)(n.code,{children:"project_id"})," and OTEL endpoint."]}),"\n",(0,t.jsx)(n.li,{children:"Ensure that you have write access to the project."}),"\n",(0,t.jsxs)(n.li,{children:["Review the ",(0,t.jsx)(n.a,{href:"#api-endpoint-details",children:"API endpoint details"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Generate the ",(0,t.jsx)(n.a,{href:"#generate-authorization-headers",children:"required authorization headers"})," and set up your OTLP HTTP exporter using the provided values."]}),"\n",(0,t.jsx)(n.li,{children:"Try an example use case."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"api-endpoint-details",children:"API endpoint details"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URL"}),": ",(0,t.jsx)(n.code,{children:"https://trace.wandb.ai/otel/v1/traces"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method"}),": ",(0,t.jsx)(n.code,{children:"POST"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content-Type"}),": ",(0,t.jsx)(n.code,{children:"application/x-protobuf"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Body"}),": A serialized ",(0,t.jsx)(n.code,{children:"ExportTraceServiceRequest"})," protobuf"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"required-headers",children:"Required headers"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can generate the required authorization headers using ",(0,t.jsx)(n.a,{href:"#generate-authorization-headers",children:"this script"}),"."]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"content-type: application/x-protobuf"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"project_id: <your_entity>/<your_project_name>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Authorization=Basic <Base64 Encoding of api:$WANDB_API_KEY>"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"optional-headers",children:"Optional headers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"content-encoding: gzip"})," or ",(0,t.jsx)(n.code,{children:"deflate"})," (for compressed data)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"response",children:"Response"}),"\n",(0,t.jsxs)(n.p,{children:["If successful, the endpoint returns ",(0,t.jsx)(n.code,{children:"200 OK"})," with an empty ",(0,t.jsx)(n.code,{children:"ExportTraceServiceResponse"})," body."]}),"\n",(0,t.jsx)(n.h3,{id:"error-codes",children:"Error codes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"401 Unauthorized"})," \u2013 Invalid or missing API key. Ensure you are using a valid API key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"403 Forbidden"})," \u2013 You don\u2019t have permission to write to the project. Ensure your API key has write access."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"400 Bad Request"})," \u2013 Headers are missing or the data format is invalid. Ensure that you've included ",(0,t.jsx)(n.a,{href:"#required-headers",children:"required headers"})," and that your data is correctly formatted."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All traces in a single request must belong to the same project"}),"\n",(0,t.jsx)(n.li,{children:"Maximum request size is defined by your server configuration."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"generate-authorization-headers",children:"Generate authorization headers"}),"\n",(0,t.jsxs)(n.p,{children:["The following Python script generates the headers for performing trace exports to the ",(0,t.jsx)(n.code,{children:"AwesomeProject"})," under the ",(0,t.jsx)(n.code,{children:"ExampleCorp"})," entity."]}),"\n",(0,t.jsx)(n.p,{children:"The recommended usage for this script is as follows:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Run the script once to generate the authorization headers."}),"\n",(0,t.jsx)(n.li,{children:"Store the definitions in a secure place."}),"\n",(0,t.jsx)(n.li,{children:"Load into your project environment."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To use this script, replace ",(0,t.jsx)(n.code,{children:"ExampleCorp/AwesomeProject"})," and ",(0,t.jsx)(n.code,{children:"YOUR_WANDB_API_KEY"})," with your actual W&B project name and API key."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import base64\n\nWANDB_BASE_URL = \'https://trace.wandb.ai\'\nPROJECT_ID = "ExampleCorp/AwesomeProject"\nWANDB_PASSWORD = "YOUR_WANDB_API_KEY"\n\nAUTH = base64.b64encode(f"api:{WANDB_PASSWORD}".encode()).decode()\n\nHEADER_DEFINITION = f"OTEL_EXPORTER_OTLP_HEADERS=\\"Authorization=Basic {AUTH},project_id={PROJECT_ID}\\""\nENDPOINT_DEFINITION = f"OTEL_EXPORTER_OTLP_ENDPOINT=\\"{WANDB_BASE_URL}/otel/v1/traces\\""\n\nprint(f"Place the following in your .env file:\\n{HEADER_DEFINITION}\\n{ENDPOINT_DEFINITION}")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-usage",children:"Example usage"}),"\n",(0,t.jsx)(n.h3,{id:"create-a-basic-otlp-exporter",children:"Create a basic OTLP exporter"}),"\n",(0,t.jsx)(n.p,{children:"The following code sample configures the OTLP exporter to send traces to Weave. Additional SDK configuration depends on your OpenTelemetry usage and environment."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nimport os\n\nos.environ["OTEL_EXPORTER_OTLP_HEADERS"] = "Authorization=Basic <ENCODED>,project_id=ExampleCorp/AwesomeProject"\notlp_exporter = OTLPSpanExporter(endpoint="https://trace.wandb.ai/otel/v1/traces")\n\n# Your additional configurations depend on your environment\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"use-openllmetrys-openaiinstrumentor",children:["Use OpenLLMetry's ",(0,t.jsx)(n.code,{children:"OpenAIInstrumentor"})]}),"\n",(0,t.jsxs)(n.p,{children:["The following code sample uses OpenLLMetry's ",(0,t.jsx)(n.code,{children:"OpenAIInstrumentor"})," to automatically export OTEL Traces:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import os\nimport openai\nfrom dotenv import load_dotenv\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk import trace as trace_sdk\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, SimpleSpanProcessor\nfrom opentelemetry.instrumentation.openai import OpenAIInstrumentor\n\nload_dotenv()\n\ntracer_provider = trace_sdk.TracerProvider()\n# Export spans to the OTLP endpoint\ntracer_provider.add_span_processor(SimpleSpanProcessor(\n    OTLPSpanExporter(os.environ[\'OTEL_EXPORTER_OTLP_ENDPOINT\'])\n))\n# Optionally, log the spans to console.\ntracer_provider.add_span_processor(SimpleSpanProcessor(ConsoleSpanExporter()))\n\n# Set up the instrumentation for OpenAI\nOpenAIInstrumentor().instrument(tracer_provider=tracer_provider)\n\ndef main():\n    client = openai.OpenAI()\n    response = client.chat.completions.create(\n        model="gpt-3.5-turbo",\n        messages=[{"role": "user", "content": "Describe OTEL in a single sentence."}],\n        max_tokens=20,\n        stream=True,\n        stream_options={"include_usage": True},\n    )\n    for chunk in response:\n        if chunk.choices and (content := chunk.choices[0].delta.content):\n            print(content, end="")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To use this code sample, ensure that you followed the above instructions to set ",(0,t.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"})," and ",(0,t.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_HEADERS"})," in your .env file. Then run the following commands in your terminal and paste the code into main.py:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"uv init\nuv add dotenv openai opentelemetry-api opentelemetry-exporter-otlp opentelemetry-exporter-otlp-proto-http opentelemetry-instrumentation-openai opentelemetry-sdk\nuv run main.py\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"use-openinferences-openaiinstrumentor",children:["Use OpenInference's ",(0,t.jsx)(n.code,{children:"OpenAIInstrumentor"})]}),"\n",(0,t.jsxs)(n.p,{children:["The following code sample uses OpenInference's ",(0,t.jsx)(n.code,{children:"OpenAIInstrumentor"})," to automatically export OTEL Traces:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import os\nimport openai\nfrom dotenv import load_dotenv\nfrom openinference.instrumentation.openai import OpenAIInstrumentor\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk import trace as trace_sdk\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, SimpleSpanProcessor\n\nload_dotenv()\n\nendpoint = os.environ[\'OTEL_EXPORTER_OTLP_ENDPOINT\']\n\ntracer_provider = trace_sdk.TracerProvider()\ntracer_provider.add_span_processor(SimpleSpanProcessor(OTLPSpanExporter(endpoint)))\n# Optionally, print the spans to the console.\ntracer_provider.add_span_processor(SimpleSpanProcessor(ConsoleSpanExporter()))\n\nOpenAIInstrumentor().instrument(tracer_provider=tracer_provider)\n\ndef main():\n    client = openai.OpenAI()\n    response = client.chat.completions.create(\n        model="gpt-3.5-turbo",\n        messages=[{"role": "user", "content": "Describe OTEL in a single sentence."}],\n        max_tokens=20,\n        stream=True,\n        stream_options={"include_usage": True},\n    )\n    for chunk in response:\n        if chunk.choices and (content := chunk.choices[0].delta.content):\n            print(content, end="")\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To use this code sample, ensure that you followed the above instructions to set ",(0,t.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"})," and ",(0,t.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_HEADERS"})," in your .env file. Then run the following commands in your terminal and paste the code into main.py"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"uv init\nuv add dotenv openai openinference-instrumentation-openai openinference-semantic-conventions opentelemetry-exporter-otlp-proto-http opentelemetry-instrumentation-openai\nuv run main.py\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>s});var t=r(67294);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);